name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd apps/frontend && npm ci
        cd ../backend && npm ci
        cd ../../contracts && npm ci
    
    - name: Run linting
      run: |
        npm run lint
        cd apps/frontend && npm run lint
        cd ../backend && npm run lint
    
    - name: Run tests
      run: |
        cd apps/frontend && npm test
        cd ../backend && npm test
        cd ../../contracts && npm test
    
    - name: Build
      run: |
        cd apps/frontend && npm run build
        cd ../backend && npm run build
        cd ../../contracts && anchor build

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: greenai_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm ci
        cd apps/frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run Frontend Tests
      run: cd apps/frontend && npm test
    
    - name: Run Backend Tests
      run: cd apps/backend && npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/greenai_test
        JWT_SECRET: test_secret
    
    - name: Run Contract Tests
      run: cd contracts && npm test

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm ci
        cd apps/frontend && npm ci
        cd ../backend && npm ci
    
    - name: Lint Frontend
      run: cd apps/frontend && npm run lint
    
    - name: Lint Backend
      run: cd apps/backend && npm run lint

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and Push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/greenai-frontend:$IMAGE_TAG ./apps/frontend
        docker build -t $ECR_REGISTRY/greenai-backend:$IMAGE_TAG ./apps/backend
        docker push $ECR_REGISTRY/greenai-frontend:$IMAGE_TAG
        docker push $ECR_REGISTRY/greenai-backend:$IMAGE_TAG
    
    - name: Update ECS services
      run: |
        aws ecs update-service --cluster greenai-cluster --service frontend-service --force-new-deployment
        aws ecs update-service --cluster greenai-cluster --service backend-service --force-new-deployment 